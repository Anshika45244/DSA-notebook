//linear search
#include<iostream>
using namespace std;
bool search(int arr[],int size, int key){
    for(int i = 0; i<size; i++){
        if(arr[i]==key){
            return true;
            
        }
    }
    return false;
}
int main(){
    int arr[10]={5,6,8,4,10,12,32,54};
    cout<<"enter the element to search"<<endl;
    int key;
    cin>>key;
    bool found = search(arr,10,key);
    if(found){
        cout<<"key is present"<<endl;
        
    }
    else{
        cout<<"key is absent"<<endl;
    }
    return 0;
}

/*  #include<iostream>
  using namespace std;
  void reverse (int arr[], int n){
      int start = 0;
      int end = n-1;
      while( start <= end){
          swap(arr[start], arr[end]);
          start++;
          end--;
          
      }
  }
  void printArray(int arr[], int n){
      for(int i =0; i<n;i++){
          cout<<arr[i]<<" ";
          
      }
      cout<<endl;
      
  }
  int main(){
      int arr1[6]={1,24,6,57,98,8 };
      int arr2[7]={2,6,5,8,7,9,1};
      reverse(arr1, 6);
      reverse(arr2,7);
      printArray (arr1,6);
      printArray (arr,7);
      return 0;
  }*/
  //swap alternate number 
  #include<iostream>
  using namespace std;
   void reverse(int arr[], int n){
       int start = 0;
       int end = 1;
       while(start<=n)
       swap(arr[start], arr[end]);
       start++; 
       end++;
       
   }
   void printArray(int arr[], int n){
       for(int i =0; i<n;i++){
           cout<<arr[i]<<" ";
       }
       cout<<endl;
   }
   int main(){
       int arr[5]={1,2,3,4,5};
       reverse (arr,5);
       printArray(arr,5);
       return 0;
   }
  
  
  
  
    //swap alternate number 
/*  #include<iostream>
  using namespace std;
   void swap(int arr[], int n, int i){
     int start = i;
       int end = i+1;
       swap(arr[ start], arr[end]);
       start++; 
       end++;
       
   }
   void printArray(int arr[], int n){
       for(int i =0; i<n;i++){
           cout<<arr[i]<<" ";
       }
       cout<<endl;
   }
   int main(){
       int arr[5]={1,2,3,4,5};
       swap (arr,5);
       printArray(arr,5);
       return 0;
   }*/
/*   // swaping alternate
   #include<iostream>
   using namespace std;
   void swapAlernate(int arr[], int n){
   for(int i =0; i<n-1;i++){
       swap(arr[i], arr[i+1]);
           
       }
   }
   void printArray(int arr[], int n){
       
   for(int i = 0; i< n; i++){
       cout<<arr[i]<<" ";
   }
   cout<<endl;
   }
   int main(){
         int arr[5]={1,2,3,45,5};
         swapAlernate(arr,5);
         printArray(arr,5);
         return 0;
   }
  
  */
  
  
  
  //AP
#include<iostream>
using namespace std;
int arithmartic(int n){
    return 3*n+7;
}
int main(){
    int n;
    cout<<" enter n:";
    cin>>n;
    int result = arithmartic(n);
    cout<<"answer is"<<result <<endl;
    return 0;
}
  // gp
#include<iostream>
#include<cmath>
using namespace std;
int Geometric(int a, int r, int n){
return a*pow(r ,n-1);
}
int main(){
    int a,r,n;
    cout<<"enter the first term(a):"<<" ";
     cin>>a;
    cout<<"enter the common ratio(r):"<<" ";
    cin>>r;
    cout<<"enter the the number of term(n):"<<" ";
    cin>>n;
    int result = Geometric(a,r,n);
    cout<<result<<endl;
    return 0;
}



  
  /* find duplicate
#include<iostream>
#include<vector>
using namespace std;
int findDuplicate(const vector<int>&arr){
    int ans = 0;
    for(int i= 0; i< arr.size(); i++){
        ans = ans^arr[i];
        
    }
    for(int i = 1; i<arr.size();i++){
        ans = ans ^i;
    }
 return ans;
}
int main(){
    vector<int> arr ={ 1,2,3,5,4,2};
    cout<<"duplicate element is :"<< findDuplicate(arr)<<endl;
    return 0;
}
#include<iostream>
#include<vector>
#include<unordered_map>

using namespace std;
int main(){
    vector<int>arr ={1,2,3,4,6,5,3,4,2};
    unordered_map<int , int> freq;
    for(int i=0; i< arr.size();i++){
        freq[arr[i]]++;
    }
        cout<<"duplicate element is:";
        for(auto it :freq){
            if(it.second>1){
                cout<<it.first<<" ";
                
            }
        }
        cout<<endl;
         return 0;
    }

// pair sum
#include<iostream>
#include<vector>
#include<unordered_map>
using namespace std;
int main(){
    vector<int> arr={1,2,3,4,5};
    int target= 5;
    unordered_map<int, int> freq;
    cout<<"pair with sum"<<target<<"are:\n";
    for(int i =0; i<arr.size();i++){
        int complement = target - arr[i];
        if(freq[complement]>0){
            cout<<"("<<arr[i]<<", "<<complement<<")\n";
            freq[complement]--;
            
    }
    else{
        freq[arr[i]]++;
    
}
}
return 0;
}*/
/*#include<iostream>
#include<vector>
#include<algorithm>// ye sort function ko  include karta hai
using namespace std;
// function top find triplet
void findTriplets(vector<int>&arr, int target){
    sort(arr.begin(),arr.end());// sort karenge jisse 2 pointer techniue laga pao
    cout<<" triplet wth sum"<<target <<"are:\n";
    //fixed karo element karo ek ek kar karenge
    for(int i= 0; i<arr.size()-2;i++)
    {
     int left =i+1;
     int right = arr.size()-1;
     // use two pointer two find remaining two elements
     while(left<right){
         int  sum = arr[i]+arr[left]+arr[right];
         if(sum== target){
             
                cout << "(" << arr[i] << ", " << arr[left] << ", " << arr[right] << ")\n";
                left++;    // Move left pointer forward
                right--;   // Move right pointer backward
            } else if (sum < target) {
                left++;    // If sum is too small, move left to increase sum
            } else {
                right--;   //  If sum is too large, move right to decrease sum
            }
        }
    }
}

//  Main function to test the triplet finder
int main() {
    vector<int> arr = {1, 2, 3, 4, 5, 6, 7};  
    int target = 12;                          
    findTriplets(arr, target);          
     return 0;
}
*/
















































































































  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
